global !p
# from snippet_helpers import *
endglobal

snippet ifdef "ifdefine file starter"
#ifndef ${1:`!p snip.rv=(snip.fn).replace('.', '_').upper()`}_
#define $1_

$0

#endif
endsnippet

snippet classdef "define a class"
class ${1:`!p snip.rv=(snip.fn).split('.')[0]`}{
public:
    `!p snip.rv = t[1].split(':')[0]`();
private:
    $0
};
endsnippet

snippet getter "set a getter"
const ${2:int}& ${1:var}() const{
    return m_$1;
}
endsnippet

snippet setter "set a setter"
void ${1:var}(const ${2:int}& new_$1){
    m_$1 = new_$1;
}
endsnippet

snippet fori "for i loop"
for (size_t i=0; i<$1; i++){
    $0
}
endsnippet

snippet print "cout checking"
std::cout<<"${2: INFO}:$1 "<<$1<<std::endl;
endsnippet

snippet printv "print vector"
for (size_t i=0; i<$1.size(); i++){
    std::cout<<$1[i]<<" ";
}
std::cout<<std::endl;
endsnippet

snippet printv2 "print 2d vector"
for (size_t i=0; i<$1.size(); i++){
    for (size_t j=0; j<$1[i].size(); j++){
        std::cout<<$1[i]<<" ";
    }
    std::cout<<std::endl;
}
endsnippet



snippet for2d "for ij loop"
for (size_t i=0; i<$1.size(); i++){
    for (size_t j=0; j<$1[0].size(); j++){
        $0
    }
}

snippet testcase "a test case"
TEST_CASE($1){
    $0
}
endsnippet

snippet opencv_experiment
#include <iostream>
#include <string>
#include <opencv2/opencv.hpp>


cv::Mat3b read_image(const std::string& filename){
    auto result = cv::imread(filename, CV_LOAD_IMAGE_COLOR);
    return result;
}

int main(){
    std::string name;
    std::cin>>name;
    auto image = read_image(name);
    cv::namedWindow("display window", cv::WINDOW_AUTOSIZE);
    cv::imshow("display window", image);
    cv::waitKey(0);
}
endsnippet
